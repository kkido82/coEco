//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CoEco.Services.InforuSmsGate {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendMessageSoap", Namespace="http://tempuri.org/")]
    public partial class SendMessage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsDetailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsXmlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendMessage() {
            this.Url = global::CoEco.Services.Properties.Settings.Default.CoEco_Services_InforuSmsGate_SendMessage;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event SendSmsDetailedCompletedEventHandler SendSmsDetailedCompleted;
        
        /// <remarks/>
        public event SendSmsXmlCompletedEventHandler SendSmsXmlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSms(string userName, string password, string message, string recipients, string senderName, string senderNumber) {
            object[] results = this.Invoke("SendSms", new object[] {
                        userName,
                        password,
                        message,
                        recipients,
                        senderName,
                        senderNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string userName, string password, string message, string recipients, string senderName, string senderNumber) {
            this.SendSmsAsync(userName, password, message, recipients, senderName, senderNumber, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string userName, string password, string message, string recipients, string senderName, string senderNumber, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        userName,
                        password,
                        message,
                        recipients,
                        senderName,
                        senderNumber}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSmsDetailed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSmsDetailed(string userName, string password, string message, string messagePelephone, string messageCellcom, string messageOrange, string messageMirs, string recipients, string customerParameter, string customerMessageId, int messageInterval, System.DateTime timeToSend, string senderName, string senderNumber, int maxSegments) {
            object[] results = this.Invoke("SendSmsDetailed", new object[] {
                        userName,
                        password,
                        message,
                        messagePelephone,
                        messageCellcom,
                        messageOrange,
                        messageMirs,
                        recipients,
                        customerParameter,
                        customerMessageId,
                        messageInterval,
                        timeToSend,
                        senderName,
                        senderNumber,
                        maxSegments});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsDetailedAsync(string userName, string password, string message, string messagePelephone, string messageCellcom, string messageOrange, string messageMirs, string recipients, string customerParameter, string customerMessageId, int messageInterval, System.DateTime timeToSend, string senderName, string senderNumber, int maxSegments) {
            this.SendSmsDetailedAsync(userName, password, message, messagePelephone, messageCellcom, messageOrange, messageMirs, recipients, customerParameter, customerMessageId, messageInterval, timeToSend, senderName, senderNumber, maxSegments, null);
        }
        
        /// <remarks/>
        public void SendSmsDetailedAsync(
                    string userName, 
                    string password, 
                    string message, 
                    string messagePelephone, 
                    string messageCellcom, 
                    string messageOrange, 
                    string messageMirs, 
                    string recipients, 
                    string customerParameter, 
                    string customerMessageId, 
                    int messageInterval, 
                    System.DateTime timeToSend, 
                    string senderName, 
                    string senderNumber, 
                    int maxSegments, 
                    object userState) {
            if ((this.SendSmsDetailedOperationCompleted == null)) {
                this.SendSmsDetailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsDetailedOperationCompleted);
            }
            this.InvokeAsync("SendSmsDetailed", new object[] {
                        userName,
                        password,
                        message,
                        messagePelephone,
                        messageCellcom,
                        messageOrange,
                        messageMirs,
                        recipients,
                        customerParameter,
                        customerMessageId,
                        messageInterval,
                        timeToSend,
                        senderName,
                        senderNumber,
                        maxSegments}, this.SendSmsDetailedOperationCompleted, userState);
        }
        
        private void OnSendSmsDetailedOperationCompleted(object arg) {
            if ((this.SendSmsDetailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsDetailedCompleted(this, new SendSmsDetailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSmsXml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSmsXml(string xmlData) {
            object[] results = this.Invoke("SendSmsXml", new object[] {
                        xmlData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsXmlAsync(string xmlData) {
            this.SendSmsXmlAsync(xmlData, null);
        }
        
        /// <remarks/>
        public void SendSmsXmlAsync(string xmlData, object userState) {
            if ((this.SendSmsXmlOperationCompleted == null)) {
                this.SendSmsXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsXmlOperationCompleted);
            }
            this.InvokeAsync("SendSmsXml", new object[] {
                        xmlData}, this.SendSmsXmlOperationCompleted, userState);
        }
        
        private void OnSendSmsXmlOperationCompleted(object arg) {
            if ((this.SendSmsXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsXmlCompleted(this, new SendSmsXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsDetailedCompletedEventHandler(object sender, SendSmsDetailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsDetailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsDetailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsXmlCompletedEventHandler(object sender, SendSmsXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591