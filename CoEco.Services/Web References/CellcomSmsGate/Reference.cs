//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CoEco.Services.CellcomSmsGate {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmsGate2Soap", Namespace="http://sms.cellcom.co.il/smsgate/")]
    public partial class SmsGate2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WapPushOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsConcatenatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendLocationSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendLocationSms2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendLocationSms3OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsExRBOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsPipeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsPipeRBOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRoutingUriOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmsGate2() {
            this.Url = global::CoEco.Services.Properties.Settings.Default.CoEco_Services_CellcomSmsGate_SmsGate2;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WapPushCompletedEventHandler WapPushCompleted;
        
        /// <remarks/>
        public event SendSmsConcatenatedCompletedEventHandler SendSmsConcatenatedCompleted;
        
        /// <remarks/>
        public event SendLocationSmsCompletedEventHandler SendLocationSmsCompleted;
        
        /// <remarks/>
        public event SendLocationSms2CompletedEventHandler SendLocationSms2Completed;
        
        /// <remarks/>
        public event SendLocationSms3CompletedEventHandler SendLocationSms3Completed;
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event SendSmsExCompletedEventHandler SendSmsExCompleted;
        
        /// <remarks/>
        public event SendSmsExRBCompletedEventHandler SendSmsExRBCompleted;
        
        /// <remarks/>
        public event SendSmsPipeCompletedEventHandler SendSmsPipeCompleted;
        
        /// <remarks/>
        public event SendSmsPipeRBCompletedEventHandler SendSmsPipeRBCompleted;
        
        /// <remarks/>
        public event SetRoutingUriCompletedEventHandler SetRoutingUriCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/WapPush", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WapPush(string username, string password, string target, string pushUrl, string description) {
            object[] results = this.Invoke("WapPush", new object[] {
                        username,
                        password,
                        target,
                        pushUrl,
                        description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WapPushAsync(string username, string password, string target, string pushUrl, string description) {
            this.WapPushAsync(username, password, target, pushUrl, description, null);
        }
        
        /// <remarks/>
        public void WapPushAsync(string username, string password, string target, string pushUrl, string description, object userState) {
            if ((this.WapPushOperationCompleted == null)) {
                this.WapPushOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWapPushOperationCompleted);
            }
            this.InvokeAsync("WapPush", new object[] {
                        username,
                        password,
                        target,
                        pushUrl,
                        description}, this.WapPushOperationCompleted, userState);
        }
        
        private void OnWapPushOperationCompleted(object arg) {
            if ((this.WapPushCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WapPushCompleted(this, new WapPushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSmsConcatenated", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSmsConcatenated(string Username, string Password, string Target, string Source, string Message, string DelimStr, int Validity, bool NewLineSegments, bool Replace, bool Immediate) {
            object[] results = this.Invoke("SendSmsConcatenated", new object[] {
                        Username,
                        Password,
                        Target,
                        Source,
                        Message,
                        DelimStr,
                        Validity,
                        NewLineSegments,
                        Replace,
                        Immediate});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsConcatenatedAsync(string Username, string Password, string Target, string Source, string Message, string DelimStr, int Validity, bool NewLineSegments, bool Replace, bool Immediate) {
            this.SendSmsConcatenatedAsync(Username, Password, Target, Source, Message, DelimStr, Validity, NewLineSegments, Replace, Immediate, null);
        }
        
        /// <remarks/>
        public void SendSmsConcatenatedAsync(string Username, string Password, string Target, string Source, string Message, string DelimStr, int Validity, bool NewLineSegments, bool Replace, bool Immediate, object userState) {
            if ((this.SendSmsConcatenatedOperationCompleted == null)) {
                this.SendSmsConcatenatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsConcatenatedOperationCompleted);
            }
            this.InvokeAsync("SendSmsConcatenated", new object[] {
                        Username,
                        Password,
                        Target,
                        Source,
                        Message,
                        DelimStr,
                        Validity,
                        NewLineSegments,
                        Replace,
                        Immediate}, this.SendSmsConcatenatedOperationCompleted, userState);
        }
        
        private void OnSendSmsConcatenatedOperationCompleted(object arg) {
            if ((this.SendSmsConcatenatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsConcatenatedCompleted(this, new SendSmsConcatenatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendLocationSms", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck SendLocationSms(string Username, string Password, long Target) {
            object[] results = this.Invoke("SendLocationSms", new object[] {
                        Username,
                        Password,
                        Target});
            return ((SendSmsAck)(results[0]));
        }
        
        /// <remarks/>
        public void SendLocationSmsAsync(string Username, string Password, long Target) {
            this.SendLocationSmsAsync(Username, Password, Target, null);
        }
        
        /// <remarks/>
        public void SendLocationSmsAsync(string Username, string Password, long Target, object userState) {
            if ((this.SendLocationSmsOperationCompleted == null)) {
                this.SendLocationSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLocationSmsOperationCompleted);
            }
            this.InvokeAsync("SendLocationSms", new object[] {
                        Username,
                        Password,
                        Target}, this.SendLocationSmsOperationCompleted, userState);
        }
        
        private void OnSendLocationSmsOperationCompleted(object arg) {
            if ((this.SendLocationSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendLocationSmsCompleted(this, new SendLocationSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendLocationSms2", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck SendLocationSms2(string Username, string Password, long Target) {
            object[] results = this.Invoke("SendLocationSms2", new object[] {
                        Username,
                        Password,
                        Target});
            return ((SendSmsAck)(results[0]));
        }
        
        /// <remarks/>
        public void SendLocationSms2Async(string Username, string Password, long Target) {
            this.SendLocationSms2Async(Username, Password, Target, null);
        }
        
        /// <remarks/>
        public void SendLocationSms2Async(string Username, string Password, long Target, object userState) {
            if ((this.SendLocationSms2OperationCompleted == null)) {
                this.SendLocationSms2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLocationSms2OperationCompleted);
            }
            this.InvokeAsync("SendLocationSms2", new object[] {
                        Username,
                        Password,
                        Target}, this.SendLocationSms2OperationCompleted, userState);
        }
        
        private void OnSendLocationSms2OperationCompleted(object arg) {
            if ((this.SendLocationSms2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendLocationSms2Completed(this, new SendLocationSms2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendLocationSms3", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck SendLocationSms3(string Username, string Password, long Target, bool RequestDR, int Validity) {
            object[] results = this.Invoke("SendLocationSms3", new object[] {
                        Username,
                        Password,
                        Target,
                        RequestDR,
                        Validity});
            return ((SendSmsAck)(results[0]));
        }
        
        /// <remarks/>
        public void SendLocationSms3Async(string Username, string Password, long Target, bool RequestDR, int Validity) {
            this.SendLocationSms3Async(Username, Password, Target, RequestDR, Validity, null);
        }
        
        /// <remarks/>
        public void SendLocationSms3Async(string Username, string Password, long Target, bool RequestDR, int Validity, object userState) {
            if ((this.SendLocationSms3OperationCompleted == null)) {
                this.SendLocationSms3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLocationSms3OperationCompleted);
            }
            this.InvokeAsync("SendLocationSms3", new object[] {
                        Username,
                        Password,
                        Target,
                        RequestDR,
                        Validity}, this.SendLocationSms3OperationCompleted, userState);
        }
        
        private void OnSendLocationSms3OperationCompleted(object arg) {
            if ((this.SendLocationSms3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendLocationSms3Completed(this, new SendLocationSms3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSms", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSms(string Username, string Password, string Target, string Source, string Message, string Validity, string Replace, bool Immediate) {
            object[] results = this.Invoke("SendSms", new object[] {
                        Username,
                        Password,
                        Target,
                        Source,
                        Message,
                        Validity,
                        Replace,
                        Immediate});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string Username, string Password, string Target, string Source, string Message, string Validity, string Replace, bool Immediate) {
            this.SendSmsAsync(Username, Password, Target, Source, Message, Validity, Replace, Immediate, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string Username, string Password, string Target, string Source, string Message, string Validity, string Replace, bool Immediate, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        Username,
                        Password,
                        Target,
                        Source,
                        Message,
                        Validity,
                        Replace,
                        Immediate}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSmsEx", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSmsEx(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments) {
            object[] results = this.Invoke("SendSmsEx", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsExAsync(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments) {
            this.SendSmsExAsync(username, password, target, source, message, pushUrl, validity, replace, immediate, isBinary, deliveryReceipt, maxSegments, null);
        }
        
        /// <remarks/>
        public void SendSmsExAsync(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, object userState) {
            if ((this.SendSmsExOperationCompleted == null)) {
                this.SendSmsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsExOperationCompleted);
            }
            this.InvokeAsync("SendSmsEx", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments}, this.SendSmsExOperationCompleted, userState);
        }
        
        private void OnSendSmsExOperationCompleted(object arg) {
            if ((this.SendSmsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsExCompleted(this, new SendSmsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSmsExRB", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSmsExRB(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, string categoryName) {
            object[] results = this.Invoke("SendSmsExRB", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        categoryName});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsExRBAsync(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, string categoryName) {
            this.SendSmsExRBAsync(username, password, target, source, message, pushUrl, validity, replace, immediate, isBinary, deliveryReceipt, maxSegments, categoryName, null);
        }
        
        /// <remarks/>
        public void SendSmsExRBAsync(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, string categoryName, object userState) {
            if ((this.SendSmsExRBOperationCompleted == null)) {
                this.SendSmsExRBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsExRBOperationCompleted);
            }
            this.InvokeAsync("SendSmsExRB", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        categoryName}, this.SendSmsExRBOperationCompleted, userState);
        }
        
        private void OnSendSmsExRBOperationCompleted(object arg) {
            if ((this.SendSmsExRBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsExRBCompleted(this, new SendSmsExRBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSmsPipe", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSmsPipe(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, bool isMarketing, string senderName, string senderPhone) {
            object[] results = this.Invoke("SendSmsPipe", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        isMarketing,
                        senderName,
                        senderPhone});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsPipeAsync(string username, string password, string target, string source, string message, string pushUrl, int validity, bool replace, bool immediate, bool isBinary, bool deliveryReceipt, int maxSegments, bool isMarketing, string senderName, string senderPhone) {
            this.SendSmsPipeAsync(username, password, target, source, message, pushUrl, validity, replace, immediate, isBinary, deliveryReceipt, maxSegments, isMarketing, senderName, senderPhone, null);
        }
        
        /// <remarks/>
        public void SendSmsPipeAsync(
                    string username, 
                    string password, 
                    string target, 
                    string source, 
                    string message, 
                    string pushUrl, 
                    int validity, 
                    bool replace, 
                    bool immediate, 
                    bool isBinary, 
                    bool deliveryReceipt, 
                    int maxSegments, 
                    bool isMarketing, 
                    string senderName, 
                    string senderPhone, 
                    object userState) {
            if ((this.SendSmsPipeOperationCompleted == null)) {
                this.SendSmsPipeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsPipeOperationCompleted);
            }
            this.InvokeAsync("SendSmsPipe", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        isMarketing,
                        senderName,
                        senderPhone}, this.SendSmsPipeOperationCompleted, userState);
        }
        
        private void OnSendSmsPipeOperationCompleted(object arg) {
            if ((this.SendSmsPipeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsPipeCompleted(this, new SendSmsPipeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SendSmsPipeRB", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendSmsAck[] SendSmsPipeRB(
                    string username, 
                    string password, 
                    string target, 
                    string source, 
                    string message, 
                    string pushUrl, 
                    int validity, 
                    bool replace, 
                    bool immediate, 
                    bool isBinary, 
                    bool deliveryReceipt, 
                    int maxSegments, 
                    bool isMarketing, 
                    string senderName, 
                    string senderPhone, 
                    string categoryName) {
            object[] results = this.Invoke("SendSmsPipeRB", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        isMarketing,
                        senderName,
                        senderPhone,
                        categoryName});
            return ((SendSmsAck[])(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsPipeRBAsync(
                    string username, 
                    string password, 
                    string target, 
                    string source, 
                    string message, 
                    string pushUrl, 
                    int validity, 
                    bool replace, 
                    bool immediate, 
                    bool isBinary, 
                    bool deliveryReceipt, 
                    int maxSegments, 
                    bool isMarketing, 
                    string senderName, 
                    string senderPhone, 
                    string categoryName) {
            this.SendSmsPipeRBAsync(username, password, target, source, message, pushUrl, validity, replace, immediate, isBinary, deliveryReceipt, maxSegments, isMarketing, senderName, senderPhone, categoryName, null);
        }
        
        /// <remarks/>
        public void SendSmsPipeRBAsync(
                    string username, 
                    string password, 
                    string target, 
                    string source, 
                    string message, 
                    string pushUrl, 
                    int validity, 
                    bool replace, 
                    bool immediate, 
                    bool isBinary, 
                    bool deliveryReceipt, 
                    int maxSegments, 
                    bool isMarketing, 
                    string senderName, 
                    string senderPhone, 
                    string categoryName, 
                    object userState) {
            if ((this.SendSmsPipeRBOperationCompleted == null)) {
                this.SendSmsPipeRBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsPipeRBOperationCompleted);
            }
            this.InvokeAsync("SendSmsPipeRB", new object[] {
                        username,
                        password,
                        target,
                        source,
                        message,
                        pushUrl,
                        validity,
                        replace,
                        immediate,
                        isBinary,
                        deliveryReceipt,
                        maxSegments,
                        isMarketing,
                        senderName,
                        senderPhone,
                        categoryName}, this.SendSmsPipeRBOperationCompleted, userState);
        }
        
        private void OnSendSmsPipeRBOperationCompleted(object arg) {
            if ((this.SendSmsPipeRBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsPipeRBCompleted(this, new SendSmsPipeRBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sms.cellcom.co.il/smsgate/SetRoutingUri", RequestNamespace="http://sms.cellcom.co.il/smsgate/", ResponseNamespace="http://sms.cellcom.co.il/smsgate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetRoutingUri(string Username, string Password, string RouteUri) {
            object[] results = this.Invoke("SetRoutingUri", new object[] {
                        Username,
                        Password,
                        RouteUri});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetRoutingUriAsync(string Username, string Password, string RouteUri) {
            this.SetRoutingUriAsync(Username, Password, RouteUri, null);
        }
        
        /// <remarks/>
        public void SetRoutingUriAsync(string Username, string Password, string RouteUri, object userState) {
            if ((this.SetRoutingUriOperationCompleted == null)) {
                this.SetRoutingUriOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRoutingUriOperationCompleted);
            }
            this.InvokeAsync("SetRoutingUri", new object[] {
                        Username,
                        Password,
                        RouteUri}, this.SetRoutingUriOperationCompleted, userState);
        }
        
        private void OnSetRoutingUriOperationCompleted(object arg) {
            if ((this.SetRoutingUriCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRoutingUriCompleted(this, new SetRoutingUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sms.cellcom.co.il/smsgate/")]
    public partial class SendSmsAck {
        
        private bool successField;
        
        private string messageIdField;
        
        private long messageIdIntField;
        
        private int errorCodeField;
        
        private string errorDescField;
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string MessageId {
            get {
                return this.messageIdField;
            }
            set {
                this.messageIdField = value;
            }
        }
        
        /// <remarks/>
        public long MessageIdInt {
            get {
                return this.messageIdIntField;
            }
            set {
                this.messageIdIntField = value;
            }
        }
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorDesc {
            get {
                return this.errorDescField;
            }
            set {
                this.errorDescField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void WapPushCompletedEventHandler(object sender, WapPushCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WapPushCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WapPushCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsConcatenatedCompletedEventHandler(object sender, SendSmsConcatenatedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsConcatenatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsConcatenatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendLocationSmsCompletedEventHandler(object sender, SendLocationSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendLocationSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendLocationSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendLocationSms2CompletedEventHandler(object sender, SendLocationSms2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendLocationSms2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendLocationSms2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendLocationSms3CompletedEventHandler(object sender, SendLocationSms3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendLocationSms3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendLocationSms3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsExCompletedEventHandler(object sender, SendSmsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsExRBCompletedEventHandler(object sender, SendSmsExRBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsExRBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsExRBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsPipeCompletedEventHandler(object sender, SendSmsPipeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsPipeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsPipeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SendSmsPipeRBCompletedEventHandler(object sender, SendSmsPipeRBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsPipeRBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsPipeRBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendSmsAck[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendSmsAck[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SetRoutingUriCompletedEventHandler(object sender, SetRoutingUriCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRoutingUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRoutingUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591